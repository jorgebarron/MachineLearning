trainingIL <- training[, grep("IL", names(training))]
trainingIL <- training[, regexpr("IL", names(training))]
trainingIL <- training[, grep("^IL", names(training))]
preProcess(trainingIL[,], method = c("pca"), thresh=0.9 )
str(trainingIL)
trainingIL$diagnosis <- training$diagnosis
str(trainingIL)
trainfit <- train(diagnosis ~ ., data = trainingIL, method = "glm")
library(caret)
library(AppliedPredictiveModeling)
library(e1071)
install.packages("e1071")
library(e1071)
trainfit <- train(diagnosis ~ ., data = trainingIL, method = "glm")
trainfit$summary
trainfit
prComp <- prcomp(trainingIL)
trainingprComp <- trainingIL[,-""]
str(trainingIL)
trainingprComp <- trainingIL[,-"diagnosis"]
trainingprComp <- trainingIL[,-diagnosis]
dim(trainingIL)
trainingprComp <- trainingIL[,-13]
trainingprComp
str(trainingIL)
dim(trainingprComp)
prComp <- prcomp(trainingprComp)
prComp
prComp$rotation
trainPC <- predict(prComp, trainingIL)
trainPC
modelfit <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
modelfit
modelfit$confusionMatrix
modelfit <- train(training$diagnosis ~ ., method = "glm",preProcess = "pca", data=trainPC)
modelfit
confusionMatrix(modelfit)
confusionMatrix(training$diagnosis, predict(modelFit, training))
confusionMatrix(training$diagnosis, predict(modelfit, training))
library(ISLR)
install.packages("ISLR")
library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p = 0.7, list = FALSE)
library(ISLR)
library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p = 0.7, list = FALSE)
head(inTrain)
intrain
inTrain
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data = training)
dummies
head(wage)
head(Wage)
library(ISLR); library(caret); data(Wage);
inTrain <- createDataPartition(y=Wage$wage,
p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
M <- abs(cor(training[,-58]))
M <- abs(cor(training[,-58]))
dummies <- dummyVars(wage ~ jobclass, data = training)
M <- abs(cor(training[,-58]))
head(predict(dummies, newdata = training))
M <- abs(cor(training[,-58]))
head(training)
library(kernlab); library(caret); data(spam);
inTrain <- createDataPartition(y=spam$type,
p = 0.7, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
M <- abs(cor(training[,-58]))
training
head(training)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
diag
diag()
M
which(M >0.8)
which(M >0.8,arr.ind = T)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
training$Superplasticizer2 <-  log(training$Superplasticizer)
hist(training$Superplasticizer2)
training$Superplasticizer3 <-  log10(training$Superplasticizer)
hist(training$Superplasticizer3)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grep("IL", names(training))]
trainingIL
dim(trainingIL)
str(trainingIL)
trainingIL <- training[, grep("^IL", names(training))]
str(trainingIL)
dim(trainingIL)
preProc <- preProcess((training[,]), method="pca", pcaComp = 2)
preProc <- preProcess((trainingIL[,]), method="pca", pcaComp = 2)
preProc
trainPC <- predict(preProc, trainingIL[,])
trainPC
trainingIL <- training[, grep("^IL", names(training))]
preProcess(trainingIL[,], method = c("pca"), thresh=0.9 )
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grep("^IL", names(training))]
trainingIL$diagnosis <- training$diagnosis
dim(trainingIL)
trainfit <- train(diagnosis ~ ., data = trainingIL, method = "glm")
trainfit
trainFit2 <- train (training$type ~ ., method = "glm", preProcess = "pca", data = trainingIL, thresh=0.8)
trainFit2 <- train (diagnosis$type ~ ., method = "glm", preProcess = "pca", data = trainingIL, thresh=0.8)
trainFit2 <- train (diagnosis ~ ., method = "glm", preProcess = "pca", data = trainingIL, thresh=0.8)
trainFit2 <- train (diagnosis ~ ., method = "glm", preProcess = "pca", data = trainingIL)
trainFit2
preProcessQ5 <- preProcess(trainingIL[,], method = c("pca"), thresh=0.8 )
trainingIL.head()
head(trainingIL)
head(trainingIL[,-12])
head(trainingIL[,-13])
preProcessQ5 <- preProcess((trainingIL[,-13]), method = c("pca"), thresh=0.8 )
preProcessQ5
predictQ5IL <- predict(preProcessQ5)
predictQ5IL <- predict(preProcessQ5, trainingIL[,-13])
predictQ5IL
predictQ5IL <- predict(preProcessQ5, trainingIL[,-13])
predictQ5IL$confusionMatrix
?trainControl
preProcessQ5 <- preProcess((trainingIL[,-13]), method = c("pca"), trainControl(preProcOptions = (0.8)))
preProcessQ5 <- preProcess((trainingIL[,-13]), method = c("pca"), trControl = (0.8))
preProcessQ5
model2Q5 <- train(trainingIL[,13] ~ ., method = "glm", preProcess = "pca", data = trainingIL, trControl = (0.8))
library(ISLR); library(caret); data(Wage);
library(kernlab); library(caret); data(spam);
inTrain <- createDataPartition(y=spam$type,
p = 0.7, list = FALSE)
p = 0.7, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
smallSpam <- spam[,c(34,32)]
prCompSpam <- prcomp(smallSpam)
plot(prCompSpam$x[,1], prCompSpam$x[,2])
prCompSpam
typeColor <- ((spam$type=="spam")*1 + 1)
prComp <- prcomp(log10(spam[,-58]+1))
prComp
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
preProc <- preProcess(log10(spam[,-58]+1), method="pca", pcaComp=2)
# create new PC variables
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
preProc
testPC <- predict(preProc, log10(testing[,-58]+1))
testPC
head(testPC)
testPC <- predict(preProc, log10(testing[,-58]+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grep("IL", names(training))]
preProcess(trainingIL[,-1], method = c("pca"), thresh=0.9 )
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grep("IL", names(training))]
trainingIL <- trainingIL[,-13]
preProcess(trainingIL[,], method = c("pca"), thresh=0.9 )
preProcess(trainingIL[,], method = c("pca"), thresh=0.8)
preProcIL <- preProcess(trainingIL, method="pca", pcaComp = 7)
preProcIL
trainPCIL <- predict(preProcIL, trainingIL)
trainingIL <- training[, grep("IL", names(training))]
trainingIL <- trainingIL[,-13]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, grep("IL", names(training))]
trainingIL <- trainingIL[,-13]
trainingIL['diagnosis'] <- training[,1]
preProcess(trainingIL[,-13], method = c("pca"), thresh=0.8)
preProcIL <- preProcess(trainingIL[,-13], method="pca", pcaComp = 7)
trainPCIL <- predict(preProcIL, trainingIL[,-13])
modelFitIL <- train(trainingIL$diagnosis ~ ., method="glm", data=trainPCIL)
modelFitIL
testingIL <- testing[, grep("IL", names(testing))]
testingIL <- testingIL[,-13]
testingIL['diagnosis'] <- testing[,1]
testIL <- predict(preProcIL, testingIL[,-13])
confusionMatrix(testingIL$diagnosis, predict(modelFitIL, testIL))
trainfit <- train(diagnosis ~ ., data = trainingIL, method = "glm")
trainfit
confusionMatrix(testingIL$diagnosis, predict(trainfit, testingIL))
library(kernlab); library(caret); data(spam);
inTrain <- createDataPartition(y=spam$type,
p = 0.7, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(training$type ~ ., method="glm", preProcess="pca", data=training)
modelFit
confusionMatrix(testing$type, predict(modelFit, testing))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
summary(segmentationOriginal)
dim(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case == Train]
training <- segmentationOriginal[segmentationOriginal$Case == 'Train']
training <- segmentationOriginal[segmentationOriginal$Case == 'Train',]
testing <- segmentationOriginal[segmentationOriginal$Case == 'Test',]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
library(rpart)
modFit <- train(Class ~ ., method="rpart", data=training)
modFit$finalModel
predict(modFit, newdata=c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(modFit, newdata=c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit, newdata=(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2))
predict(modFit, newdata=(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
predict(modFit, (TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2))
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olive
str(olive)
summary(olive)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata=testing)
predict(modFit, newdata=newdata)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata=newdata)
modFit <- train(Area ~ ., method="tree", data=olive)
library("rpart", lib.loc="~/R/R-3.1.2/library")
modFit <- train(Area ~ ., method="tree", data=olive)
library(rpart)
modFit <- train(Area ~ ., method="tree", data=olive)
install.packages("tree")
modFit <- train(Area ~ ., method="tree", data=olive)
library(tree)
modFit <- tree(Area ~ ., data=olive)
predict(modFit, newdata=testing)
predict(modFit, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
str(trainSA)
modFit <- train(chd ~ (age, alcohol, tobacco, typea, ldl), method="glm", data=trainSA, family="binomial")
modFit <- train(chd ~ (age + alcohol + tobacco + typea + ldl), method="glm", data=trainSA, family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(4,3)
missClass(trainSA$age,modFit(age, trainSA))
modFit <- train(chd ~ (age, alcohol, tobacco, typea, ldl), method="glm", data=trainSA, family="binomial")
modFit <- train(chd ~ (age + alcohol + tobacco + typea + ldl), method="glm", data=trainSA, family="binomial")
missClass(trainSA$age,modFit(age, trainSA))
missClass(trainSA$age, predit(modFit trainSA))
missClass(trainSA$age, predit(modFit, trainSA))
missClass(trainSA$age, predict(modFit, trainSA))
function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(1.1, 1,1)
missClass(1,2)
missClass(1,3)
missClass(1.2,3)
missClass(1.5,3)
missClass(trainSA$age, predict(modFit, trainSA))
missClass(trainSA$chd, predict(modFit, trainSA))
modFit <- train(chd ~ (age + alcohol+ obesity + tobacco + typea + ldl), method="glm", data=trainSA, family="binomial")
missClass(trainSA$chd, predict(modFit, trainSA))
missClass(testSA$chd, predict(modFit, testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- factor(vowel.test$y)
str(vowel.test)
set.seed(33833)
vowel.test$y <- factor(vowel.test$y)
modFit <- train(y ~ ., data=vowel.train, methods='rf', prox=TRUE)
library(caret)
modFit <- train(y ~ ., data=vowel.train, methods='rf', prox=TRUE)
modFit <- train(y ~ ., data=vowel.train, methods='rf', prox=TRUE)
varImp(modFit)
