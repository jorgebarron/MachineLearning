getwd()
read.csv("pml-training.csv")
data <- read.csv("pml-training.csv")
head(data)
dim(data)
str(data)
summary(data)
head(data[16,1:6])
head(data[1:16,1:6])
head(data[1:16,1:8])
head(data[1:35,1:5])
(data[1:35,1:5])
(data[1:35,(1,5)])
(data[1:35,(1:5)])
(data[1:35,c(1,5)])
(data[1:35,c(1:5, 6)])
(data[1:35,c(1:5, -1)])
(data[1:35,c(1:5, 135)])
str(data)
dim(data)
(data[1:35,c(1:5, 160)])
(data[1:55,c(1:5, 160)])
(data[1:155,c(1:5, 160)])
(data[1:255,c(1:5, 160)])
str(head(data))
(data[1:2,c(1:5, 160)])
(data[1:2,c(2, 160)])
(data[1:2,c(3, 160)])
(data[1,c(3, 160)])
(data[1,3])
data[1,3]
unclass(as.POSIXlt(data[1,3]))
unclass(as.POSIXlt(now))
data['user_name'] == 'carlitos'
sum(data['user_name'])
data(data['user_name'])
data(data['user_name' ]=='carlitos')
data[data['user_name'] == 'carlitos']
carlitos <- data[data['user_name'] == 'carlitos']
dim(carlitos)
head(carlitos)
carlitos <- data[data['user_name'] == 'carlitos',]
dim(carlitos)
str(carlitos)
head(carlitos)
(carlitos[1:2,c(2, 160)])
(carlitos[1:12,c(2, 160)])
(carlitos[12:82,c(2, 160)])
(carlitos[82:150,c(2, 160)])
(carlitos[150:350,c(2, 160)])
(carlitos[350:450,c(2, 160)])
carlitosA <- carlitos[carlitos['classe'] == 'A',]
carlitosB <- carlitos[carlitos['classe'] == 'B',]
carlitosC <- carlitos[carlitos['classe'] == 'C',]
head(carlitos)
datatest <- read.csv("pml-training.csv", colClasses=c('NULL',NA))
str(datatest)
datatest <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"), colClasses=c('NULL',NA))
str(datatest)
datatest[70:75,]
datatest[,70:75]
str(datatest[,70:75])
datatest <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!", "0.00000"), colClasses=c('NULL',NA))
str(datatest[,70:75])
y <- colSums(is.na(data[(i - n):(i + m), ]))
describe(data)
str(datatest[,75])
summary(datatest[,75])
colSums(!is.na(datatest))
colSums(is.na(datatest))
colSums(is.na(datatest))>19000
colSums(is.na(datatest))
colSums(is.na(data))
datatest2 <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
dim(datatest2)
colSums(is.na(datatest2))
table(colSums(is.na(datatest2)))
datatest3 <- datatest2[,colSums(is.na(df))==nrow(df)]
datatest3 <- datatest2[,colSums(is.na(datatest2))==nrow(df)]
datatest3 <- datatest2[,colSums(is.na(datatest2))==nrow(datatest2)]
datatest3 <- datatest2[,colSums(!is.na(datatest2))==nrow(datatest2)]
str(datatest3)
str(data)
str(datatest3)
datatest4 <- datatest3[,c(-2,-3)]
str(datatest4)
datatest4 <- datatest3[,c(-2:-7)]
str(datatest4)
dim(datatest4)
library(caret)
nsv <- nearZeroVar(datatest4, saveMetrics = TRUE)
nsv
m <- abs(cor(datatest4 [-54]))
m
m <- abs(cor(datatest4 [-54]))
diag(m) <- 0
which (m > 0.8, arr.ind=T)
datatest4 <- datatest3[,c(-1:-7)]
corrdatatest4 <- abs(cor(datatest4 [-53]))
diag(corrdatatest4) <- 0
which (corrdatatest4 > 0.8, arr.ind=T)
dim(which (corrdatatest4 > 0.8, arr.ind=T))
modFit <- train(classe ~ ., data=datatest4, methods='rf', prox=TRUE)
modFit <- train(classe ~ ., data=datatest4, methods='rf', prox=TRUE, trControl=trainControl(method="cv",number=5))
modFit <- train(classe ~ ., data=datatest4, methods='rf', prox=TRUE, trControl=trainControl(ntree=500))
modFit <- train(classe ~ ., data=datatest4, methods='rf', prox=TRUE, ntree=5)
modFit <- train(classe ~ ., data=datatest4, methods='rf', number = 3, repeats = 3, ntree=5)
modFit
datatestfinal <- read.csv("pml-testing.csv")
pred <- predict(modFit, datatestfinal)
table(pred, datatest4$classe)
table(pred, datatestfinal$classe)
View(carlitos)
View(carlitos)
View(carlitos)
View(carlitos)
datatestfinal <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
datatestfinal <- datatestfinal[,colSums(!is.na(datatestfinal))==nrow(datatestfinal)]
datatestfinal <- datatestfinal[,c(-1:-7)]
pred <- predict(modFit, datatestfinal)
table(pred, datatestfinal$classe)
pred
datatestfinal
str(datatestfinal)
str(datatest4)
dim(datatest4)
dim(datatestfinal)
str(datatestfinal)
datatestfinal <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
str(datatestfinal)
head(datatestfinal)
library(caret)
getwd()
data <- read.csv("pml-training.csv")
dim(data)
str(data)
data <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
colSums(is.na(data))
table(colSums(is.na(data)))
data <- data[,colSums(!is.na(data))==nrow(data)]
data <- data[,c(-1:-7)]
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
training <- data[TrainData,]
testing <- data[-TrainData,]
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv
corrtraining <- abs(cor(training [-53]))
diag(corrtraining) <- 0
which (corrtraining > 0.8, arr.ind=T)
dim(which (corrtraining > 0.8, arr.ind=T))
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=5)
pred <- predict(modFit, testing)
table(pred, testing$classe)
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=100)
pred <- predict(modFit, testing)
table(pred, testing$classe)
sum(diag( table(pred, testing$classe)))
library(caret)
varImp(pred)
(pred)
varImp(modFit)
varImp(modFit, scale = FALSE)
varImp(modFit)
modfitImp <- varImp(modFit)
head(modfitImp)
tail(modfitImp)
modfitImp
dim(modfitImp)
order(modfitImp)
modFit$importance
modFit$results
modFit$bestTune
modfitImp$importance
dim(modfitImp)
plot(modfitImp, top = 20)
modfitImp
training[,c("roll_belt")]
head(training[,c("roll_belt")])
modfitImp
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", roll_dumbbell", "classe")])
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", roll_dumbbell", "classe"))])
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", roll_dumbbell", "classe"))])
str(training)
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", roll_dumbbell", "classe")])
head(training[,c("roll_belt", "classe")])
head(training[,c("roll_belt",  "pitch_forearm", "yaw_belt", "pitch_belt","classe")])
modfitImp
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt")])
head(training[,c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", "roll_dumbbell", "classe")])
variables <- c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", "roll_dumbbell", "classe")
head(training[, variables])
training <- (training[, variables])
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=100)
modFit2 <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=500)
testing <- (testing[, variables])
pred <- predict(modFit, testing)
table(pred, testing$classe)
sum(diag( table(pred, testing$classe)))
sum(( table(pred, testing$classe)))
sum(diag( table(pred, testing$classe))) / sum(( table(pred, testing$classe)))
datatestfinal  <- (datatestfinal[, variables])
datatestfinal <- read.csv("pml-testing.csv", na.strings = c("NA","", "#DIV/0!"))
datatestfinal <- datatestfinal[,c(-1:-7)]
datatestfinal <- datatestfinal[,colSums(!is.na(datatestfinal))==nrow(datatestfinal)]
datatestfinal  <- (datatestfinal[, variables])
str(datatestfinal)
variables <- c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt", "magnet_dumbbell_z", "magnet_dumbbell_y", "roll_forearm", "accel_dumbbell_y", "magnet_dumbbell_x", "roll_dumbbell")
datatestfinal  <- (datatestfinal[, variables])
pred <- predict(modFit, datatestfinal)
pred
testpred <- predict(modFit, datatestfinal)
getwd()
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(testpred)
data <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
colSums(is.na(data))
table(colSums(is.na(data)))
data <- data[,colSums(!is.na(data))==nrow(data)]
data <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
head(data)
table(colSums(is.na(data)))
data <- data[,colSums(!is.na(data))==nrow(data)]
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
library(caret)
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
training <- data[TrainData,]
testing <- data[-TrainData,]
corrtraining <- abs(cor(training [-53]))
diag(corrtraining) <- 0
which (corrtraining > 0.8, arr.ind=T)
dim(which (corrtraining > 0.8, arr.ind=T))
modFit
modfitImp
plot(modfitImp, top = 20)
modfitImp <- varImp(modFit)
modfitImp
modfitImp <- varImp(modFit)
modfitImp
modfitImp
modFit
modfitImp <- varImp(modFit)
modfitImp
table(pred, testing$classe)
sum(diag( table(pred, testing$classe)))
modfitImp <- varImp(modFit)
modfitImp
library(caret)
data <- read.csv("pml-training.csv")
data <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
data <- data[,colSums(!is.na(data))==nrow(data)]
data <- data[,c(-1:-7)]
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
training <- data[TrainData,]
testing <- data[-TrainData,]
dim(training)
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=5)
modfitImp <- varImp(modFit)
modfitImp
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=5)
modfitImp <- varImp(modFit)
modfitImp
library(caret)
data <- read.csv("pml-training.csv", na.strings = c("NA","", "#DIV/0!"))
table(colSums(is.na(data)))
data <- data[,colSums(!is.na(data))==nrow(data)]
data <- data[,c(-1:-7)]
TrainData <- createDataPartition(y =data$classe , p=0.7, list = FALSE)
training <- data[TrainData,]
testing <- data[-TrainData,]
dim(training)
modFit <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=5)
modfitImp <- varImp(modFit)
modfitImp
plot(modfitImp, top = 20)
modfitImp
print(modfitImp)
head(modfitImp)
type(modfitImp)
modfitImp[1]
modfitImp$importance
type(modfitImp$importance)
library(dplyr)
arrange(modfitImp$importance)
arrange(modfitImp$importance, Overall)
arrange(modfitImp$importance, desc(Overall))
modfitImp
variables <- c("roll_belt", "pitch_forearm", "yaw_belt", "pitch_belt","magnet_dumbbell_y","roll_forearm", "magnet_dumbbell_z", "accel_dumbbell_y", "magnet_belt_z", "accel_forearm_x", "classe")
training <- (training[, variables])
modFit2 <- train(classe ~ ., data=training, methods='rf', number = 3, repeats = 3, ntree=500)
arrange(modfitImp$calledFrom)
(modfitImp$calledFrom)
(modfitImp$model)
arrange(modfitImp$importance[0])
(modfitImp$importance[0])
(modfitImp$importance[1])
arrange(modfitImp$importance[1])
arrange(modfitImp$importance, desc(Overall))
arrange(modfitImp$importance[1], desc(Overall))
modfitImp$names
modfitImp[1]names
modfitImp[1]$names
modfitImp[1]
modfitImp[1]$Overall
modfitImp[1]
testing <- (testing[, variables])
sum(diag( table(pred, testing$classe)))
pred <- predict(modFit2, testing)
sum(diag( table(pred, testing$classe)))
sum(diag( table(pred, testing$classe))) / sum(table(pred, testing$classe))
confusionMatrix(testing$classe,pred)
qplot(training.roll_belt, training.pitch_forearm, colour = classe, data = training)
qplot(training$roll_belt, training$pitch_forearm, colour = classe, data = training)
confusionMatrix(testing$classe,pred)
